{"version":3,"sources":["cpt/Time.js","cpt/DurationInput.js","utils/time.js","hooks/real-time-hooks.js","App.js","hooks/app-hooks.js","reportWebVitals.js","index.js","cpt/Time.module.scss","cpt/DurationInput.module.scss"],"names":["Time","props","className","styles","time","onClick","e","clicked_handler","hour","delimeter","minute","DurationInput","useState","inputed","set_input","duration","setDuration","time_left","set_time_left","interval_id","set_interval_id","is_counting","set_is_counting","input_dom","useRef","record_handler","useEffect","clearInterval","setTimeout","current","focus","input_cpt","durationInput","type","ref","value","onChange","target","onKeyPress","key","duration_ms","end_time_stamp","Date","getTime","inter_id","setInterval","now_timestamp","_time_left","onFocus","select","rate","progress_cpt","progress","style","width","padding_to_2_digit","num","useReal_time","setHour","setMinute","now_date","getHours","getMinutes","get_hour_minute_of_now","handler","handler_fn","App","handleResize","document","documentElement","fontSize","body","clientWidth","window","addEventListener","removeEventListener","useApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e3bdc679.chunk.js","sourcesContent":["// # styles\r\nimport styles from \"./Time.module.scss\";\r\n\r\nfunction Time(props) {\r\n  const handleClickedTime = (e) => {\r\n    props.clicked_handler();\r\n  };\r\n\r\n  return (\r\n    <div className={styles.time} onClick={handleClickedTime}>\r\n      <span className={styles.hour}>{props.hour}</span>\r\n      <span className={styles.delimeter}>:</span>\r\n      <span className={styles.minute}>{props.minute}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Time;\r\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\nimport styles from \"./DurationInput.module.scss\";\r\n\r\nfunction DurationInput(props) {\r\n  const [inputed, set_input] = useState(`25`);\r\n  const [duration, setDuration] = useState(1);\r\n  const [time_left, set_time_left] = useState(0);\r\n  const [interval_id, set_interval_id] = useState(0);\r\n  const [is_counting, set_is_counting] = useState(false);\r\n  const input_dom = useRef(null);\r\n\r\n  const handleInputChange = (e) => {\r\n    set_input(e.target.value);\r\n  };\r\n\r\n  const { record_handler } = props;\r\n\r\n  useEffect(() => {\r\n    record_handler(() => {\r\n      set_is_counting(false);\r\n\r\n      if (interval_id) {\r\n        clearInterval(interval_id);\r\n        set_interval_id(null);\r\n      }\r\n\r\n      setTimeout(() => {\r\n        input_dom.current.focus();\r\n      }, 0);\r\n    });\r\n  }, [record_handler, interval_id, input_dom]);\r\n\r\n  const handleInput = (e) => {\r\n    const { key } = e;\r\n\r\n    if (key === `Enter`) {\r\n      const duration_ms = +inputed * 60 * 1000;\r\n      const end_time_stamp = new Date().getTime() + duration_ms;\r\n\r\n      setDuration(duration_ms);\r\n\r\n      if (interval_id) {\r\n        clearInterval(interval_id);\r\n        set_interval_id(null);\r\n      }\r\n\r\n      // $ start counting down\r\n      const inter_id = setInterval(() => {\r\n        const now_timestamp = new Date().getTime();\r\n\r\n        const _time_left = end_time_stamp - now_timestamp;\r\n\r\n        if (_time_left < 0) {\r\n          clearInterval(inter_id);\r\n          set_interval_id(null);\r\n          set_time_left(0);\r\n        } else {\r\n          set_time_left(_time_left);\r\n        }\r\n      }, 200);\r\n\r\n      set_interval_id(inter_id);\r\n      set_is_counting(true);\r\n    }\r\n  };\r\n\r\n  const handleFocus = (e) => {\r\n    e.target.select();\r\n  };\r\n\r\n  const input_cpt = (\r\n    <input\r\n      className={styles.durationInput}\r\n      type=\"text\"\r\n      ref={input_dom}\r\n      value={inputed}\r\n      onChange={handleInputChange}\r\n      onKeyPress={handleInput}\r\n      onFocus={handleFocus}\r\n    />\r\n  );\r\n\r\n  let rate = 0;\r\n  if (time_left && duration) {\r\n    rate = time_left / duration;\r\n  } else {\r\n    rate = 0;\r\n  }\r\n\r\n  const progress_cpt = (\r\n    <div\r\n      className={styles.progress}\r\n      style={{ width: `${rate * 100}%` }}\r\n    ></div>\r\n  );\r\n\r\n  return <>{is_counting ? progress_cpt : input_cpt}</>;\r\n}\r\n\r\nexport default DurationInput;\r\n","function padding_to_2_digit(num) {\r\n  num < 10 && (num = `0${num}`);\r\n\r\n  return `${num}`;\r\n}\r\n\r\nexport function get_hour_minute_of_now() {\r\n  const now_date = new Date();\r\n\r\n  let hour = now_date.getHours();\r\n  hour = padding_to_2_digit(hour);\r\n\r\n  let minute = now_date.getMinutes();\r\n  minute = padding_to_2_digit(minute);\r\n\r\n  return [hour, minute];\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n// # utils\r\nimport { get_hour_minute_of_now } from \"../utils/time\";\r\n\r\nexport function useReal_time() {\r\n  const [hour, setHour] = useState(`00`);\r\n  const [minute, setMinute] = useState(`00`);\r\n\r\n  // * useEffect: did mount & did update\r\n  useEffect(\r\n    () => {\r\n      // $ start interval update time string\r\n      let interval_id = setInterval(() => {\r\n        const [hour, minute] = get_hour_minute_of_now();\r\n\r\n        setHour(hour);\r\n        setMinute(minute);\r\n      }, 200);\r\n\r\n      return () => {\r\n        // execute when unmout\r\n        // * cleaning procedures defined here\r\n\r\n        if (interval_id) {\r\n          clearInterval(interval_id);\r\n        }\r\n      };\r\n    },\r\n    [\r\n      /* values need monitor, if value changed, trigger clean up proceddures*/\r\n    ]\r\n  );\r\n\r\n  return [hour, minute];\r\n}\r\n","import Time from \"./cpt/Time\";\nimport DurationInput from \"./cpt/DurationInput\";\n// # hooks\nimport { useApp } from \"./hooks/app-hooks\";\n\nlet handler = null;\nconst record_handler = function (handler_fn) {\n  handler = handler_fn;\n};\nconst clicked_handler = () => {\n  handler();\n};\n\nfunction App() {\n  const [hour, minute] = useApp();\n\n  return (\n    <div className=\"App\">\n      <Time\n        hour={hour}\n        minute={minute}\n        clicked_handler={clicked_handler}\n      />\n      <DurationInput\n        hour={hour}\n        minute={minute}\n        record_handler={record_handler}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// # hooks\r\nimport { useReal_time } from \"./real-time-hooks\";\r\n\r\nimport { useEffect } from \"react\";\r\nexport function useApp() {\r\n  const [hour, minute] = useReal_time();\r\n\r\n  useEffect(() => {\r\n    const handleResize = (e) => {\r\n      document.documentElement.style.fontSize = `${\r\n        0.01 * document.body.clientWidth\r\n      }px`;\r\n    };\r\n    handleResize();\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return function clean_up() {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return [hour, minute];\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// $ global css\nimport \"./styles/index.css\";\n\n// # component\nimport App from \"./App\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time\":\"Time_time__39_t5\",\"delimeter\":\"Time_delimeter__1jb6k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"durationInput\":\"DurationInput_durationInput__1GLJf\",\"progress\":\"DurationInput_progress__3kWby\"};"],"sourceRoot":""}